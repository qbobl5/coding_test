import java.util.*;

class Solution {
    static List<List<Integer>> listArr;
    static boolean[] chk;
    static int cnt=0;
    
    public static void bfs(int idx) {
        Queue<Integer> queue=new LinkedList<>();
        queue.add(idx);
        while(!queue.isEmpty()) {
            int node=queue.poll();
            for(int i:listArr.get(node)) {
                if(chk[i]) continue;
                queue.add(i);
                chk[i]=true;
            }
        }
    }
    
    public int solution(int n, int[][] computers) {
        listArr=new ArrayList<>();
        chk=new boolean[n];
        
        for(int i=0;i<computers.length;i++) {
            int[] arr=computers[i];
            List<Integer> list=new ArrayList<>();
            for(int j=0;j<arr.length;j++) {
                if(i==j) continue;
                if(arr[j]==1) list.add(j);
            }
            listArr.add(list);
        }
        
        for(int i=0;i<listArr.size();i++) {
            if(chk[i]) continue;
            cnt++;
            bfs(i);
        }
        return cnt;
    }
}
